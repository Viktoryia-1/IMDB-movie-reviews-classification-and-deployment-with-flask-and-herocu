import pandas as pd
from sklearn.preprocessing import MinMaxScaler

from string import punctuation
import textblob

sw = ['i',
 'me',
 'my',
 'myself',
 'we',
 'our',
 'ours',
 'ourselves',
 'you',
 "you're",
 "you've",
 "you'll",
 "you'd",
 'your',
 'yours',
 'yourself',
 'yourselves',
 'he',
 'him',
 'his',
 'himself',
 'she',
 "she's",
 'her',
 'hers',
 'herself',
 'it',
 "it's",
 'its',
 'itself',
 'they',
 'them',
 'their',
 'theirs',
 'themselves',
 'what',
 'which',
 'who',
 'whom',
 'this',
 'that',
 "that'll",
 'these',
 'those',
 'am',
 'is',
 'are',
 'was',
 'were',
 'be',
 'been',
 'being',
 'have',
 'has',
 'had',
 'having',
 'do',
 'does',
 'did',
 'doing',
 'a',
 'an',
 'the',
 'and',
 'but',
 'if',
 'or',
 'because',
 'as',
 'until',
 'while',
 'of',
 'at',
 'by',
 'for',
 'with',
 'about',
 'against',
 'between',
 'into',
 'through',
 'during',
 'before',
 'after',
 'above',
 'below',
 'to',
 'from',
 'up',
 'down',
 'in',
 'out',
 'on',
 'off',
 'over',
 'under',
 'again',
 'further',
 'then',
 'once',
 'here',
 'there',
 'when',
 'where',
 'why',
 'how',
 'all',
 'any',
 'both',
 'each',
 'few',
 'more',
 'most',
 'other',
 'some',
 'such',
 'no',
 'nor',
 'not',
 'only',
 'own',
 'same',
 'so',
 'than',
 'too',
 'very',
 's',
 't',
 'can',
 'will',
 'just',
 'don',
 "don't",
 'should',
 "should've",
 'now',
 'd',
 'll',
 'm',
 'o',
 're',
 've',
 'y',
 'ain',
 'aren',
 "aren't",
 'couldn',
 "couldn't",
 'didn',
 "didn't",
 'doesn',
 "doesn't",
 'hadn',
 "hadn't",
 'hasn',
 "hasn't",
 'haven',
 "haven't",
 'isn',
 "isn't",
 'ma',
 'mightn',
 "mightn't",
 'mustn',
 "mustn't",
 'needn',
 "needn't",
 'shan',
 "shan't",
 'shouldn',
 "shouldn't",
 'wasn',
 "wasn't",
 'weren',
 "weren't",
 'won',
 "won't",
 'wouldn',
 "wouldn't"]

class Preprocess:
    def __init__(self, input_text):
        self.text = input_text

    def preprocess(self):
        text_len = len(self.text)
        words_num = len(self.text.split())
        sw_num = len([i for i in self.text.split() if i in sw])
        punctuation_num = len([i for i in self.text if i in punctuation])
        avg_word_len = sum([len(i) for i in self.text.split()]) / len([len(i) for i in self.text.split()])
        sentence_num = len([i for i in self.text.split('.')])
        polarity = textblob.TextBlob(self.text).sentiment.polarity
        subjectivity = textblob.TextBlob(self.text).sentiment.subjectivity
        uppercase_words_num = len([i for i in self.text.split() if i.isupper()])
        unique_words_num = len(set(self.text.split()))

        csv_features = pd.DataFrame.from_dict({
            'len': [text_len], 'words_num': [words_num],
            'sw_num': [sw_num], 'punctuation_num': [punctuation_num],
            'avg_word_len': [avg_word_len], 'sentence_num' : [sentence_num],
            'polarity': [polarity], 'subjectivity': [subjectivity],
            'uppercase_words_num': [uppercase_words_num], 'unique_words_num': [unique_words_num]
                })

        def standartization(data):
            scaler = MinMaxScaler()
            columns = ['len', 'words_num', 'sw_num', 'punctuation_num',
                       'avg_word_len', 'sentence_num', 'unique_words_num',
                       'uppercase_words_num']
            data.loc[:, columns] = scaler.fit_transform(data.loc[:, columns])
            return data
        csv_features = standartization(csv_features)
        return csv_features


